{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.jsx","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","CardList","robots","cardArray","map","user","i","key","SearchBox","searchQuery","onChange","type","placeholder","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","e","target","value","fetch","then","response","json","users","fileteredRobots","filter","robot","toLowerCase","includes","length","React","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"8MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCJSC,G,MAZF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,KAAKC,EAAU,EAAVA,MACrB,OACE,yBAAKC,UAAU,oDACT,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cACzB,6BACE,4BAAKC,GACL,2BAAIC,OCSGI,MAbf,YAA+B,IAAXC,EAAU,EAAVA,OAEZC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAAP,OAC3B,kBAAC,EAAD,CACEC,IAAKL,EAAOI,GAAGX,GACfA,GAAIO,EAAOI,GAAGX,GACdC,KAAMM,EAAOI,GAAGV,KAChBC,MAAOK,EAAOI,GAAGT,WAGrB,OAAO,oCAAGM,ICEGK,EAdG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACnB,OACE,yBAAKX,UAAU,OACb,2BACEY,SAAUD,EACVb,KAAK,SACLE,UAAU,mCACVa,KAAK,OACLC,YAAY,oBCMLC,MAdf,SAAgBC,GACd,OACE,yBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,UAGTJ,EAAMK,WCQEC,E,4MAhBbC,MAAQ,CACNC,UAAU,G,gEAGMC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACN,sEAEFG,KAAKX,MAAMK,a,GAbKQ,aC0CZC,E,4MAnCbP,MAAQ,CACNZ,YAAa,GACbP,OAAQ,I,EAQVO,YAAc,SAAAoB,GACZ,EAAKH,SAAS,CAAEjB,YAAaoB,EAAEC,OAAOC,S,kEANnB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAAExB,OAAQkC,S,+BAMjC,IAAD,EACyBX,KAAKJ,MAA7BZ,EADD,EACCA,YAAaP,EADd,EACcA,OACfmC,EAAkBnC,EAAOoC,QAAO,SAACC,EAAOjC,GAC5C,OAAOiC,EAAM3C,KAAK4C,cAAcC,SAAShC,EAAY+B,kBAEvD,OAAQtC,EAAOwC,OAGb,yBAAK5C,UAAU,MACb,wBAAIA,UAAU,MAAd,cACA,kBAAC,EAAD,CAAWW,YAAagB,KAAKhB,cAC7B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUP,OAAQmC,OAPxB,uD,GArBYM,IAAMhB,WCExBiB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SPqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.03e5b182.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nconst Card = ({id,name,email})=> {\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n          <img alt=\"robots\" src={`https://robohash.org/${id}?100x100` }/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\n\nimport Card from \"./Card\";\n\nfunction CardList({ robots }) {\n\n  const cardArray = robots.map((user, i) => (\n    <Card\n      key={robots[i].id}\n      id={robots[i].id}\n      name={robots[i].name}\n      email={robots[i].email}\n    />\n  ));\n  return <>{cardArray}</>;\n}\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchQuery }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        onChange={searchQuery}\n        name=\"search\"\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"text\"\n        placeholder=\"search robots\"\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nfunction Scroll(props) {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"3px solid black\",\n        height: \"500px\"\n      }}\n    >\n      {props.children}\n    </div>\n  );\n}\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n  state = {\n    hasError: false\n  };\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went terribly wrong here!!!!</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React from \"react\";\n\nimport \"./App.css\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox.jsx\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\n\nclass App extends React.Component {\n  state = {\n    searchQuery: \"\",\n    robots: []\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users }));\n  }\n  searchQuery = e => {\n    this.setState({ searchQuery: e.target.value });\n  };\n\n  render() {\n    const { searchQuery, robots } = this.state;\n    const fileteredRobots = robots.filter((robot, i) => {\n      return robot.name.toLowerCase().includes(searchQuery.toLowerCase());\n    });\n    return !robots.length ? (\n      <h1>Loading Robots ....</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f2\">RoboFriend</h1>\n        <SearchBox searchQuery={this.searchQuery} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={fileteredRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport 'tachyons';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}